"""
Commande Django pour envoyer les rappels automatiques
Usage: python manage.py send_reminders
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta, date
from notifications.services import ProjectNotificationService, TaskNotificationService
from notifications.models import EmailNotification
from projects.models import Project
from django.contrib.auth import get_user_model

User = get_user_model()


class Command(BaseCommand):
    help = 'Envoie les rappels automatiques pour les projets et t√¢ches'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simuler l\'envoi sans vraiment envoyer les emails',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forcer l\'envoi m√™me si d√©j√† envoy√© aujourd\'hui',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        force = options['force']
        
        self.stdout.write(
            self.style.SUCCESS('üîÑ D√©marrage du syst√®me de rappels automatiques...')
        )
        
        if dry_run:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è Mode simulation activ√© - Aucun email ne sera envoy√©')
            )
        
        # Statistiques
        stats = {
            'projects_checked': 0,
            'tasks_checked': 0,
            'notifications_sent': 0,
            'errors': 0
        }
        
        try:
            # 1. Rappels de projets
            self.stdout.write('\nüìÅ V√©rification des rappels de projets...')
            project_stats = self.check_project_reminders(dry_run, force)
            stats.update(project_stats)
            
            # 2. Rappels de t√¢ches
            self.stdout.write('\nüìã V√©rification des rappels de t√¢ches...')
            task_stats = self.check_task_reminders(dry_run, force)
            stats.update(task_stats)
            
            # 3. Afficher les statistiques
            self.display_stats(stats)
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur lors de l\'ex√©cution: {str(e)}')
            )
            stats['errors'] += 1

    def check_project_reminders(self, dry_run=False, force=False):
        """V√©rifier et envoyer les rappels de projets"""
        stats = {'projects_checked': 0, 'notifications_sent': 0, 'errors': 0}
        
        try:
            # R√©cup√©rer tous les projets actifs
            today = timezone.now().date()
            projects = Project.objects.filter(
                status__in=['En attente', 'En cours', 'En pause']
            ).exclude(deadline__isnull=True)
            
            stats['projects_checked'] = projects.count()
            self.stdout.write(f'  üìä {stats["projects_checked"]} projets √† v√©rifier')
            
            project_service = ProjectNotificationService()
            
            for project in projects:
                try:
                    deadline = project.deadline
                    days_remaining = (deadline - today).days
                    
                    # Rappels avant √©ch√©ance
                    if days_remaining in [30, 14, 7, 3, 1]:
                        if not self.already_notified_today(project, 'project_deadline_approaching', days_remaining) or force:
                            if not dry_run:
                                project_service.notify_project_deadline_approaching(project, days_remaining)
                            self.stdout.write(f'    üìß Rappel projet "{project.name}" - {days_remaining} jours restants')
                            stats['notifications_sent'] += 1
                    
                    # √âch√©ance atteinte
                    elif days_remaining == 0:
                        if not self.already_notified_today(project, 'project_deadline_reached') or force:
                            if not dry_run:
                                project_service.notify_project_deadline_reached(project)
                            self.stdout.write(f'    ‚è∞ √âch√©ance atteinte: "{project.name}"')
                            stats['notifications_sent'] += 1
                    
                    # Projet en retard
                    elif days_remaining < 0:
                        days_overdue = abs(days_remaining)
                        if days_overdue in [1, 3, 7, 14, 30]:
                            if not self.already_notified_today(project, 'project_overdue', days_overdue) or force:
                                if not dry_run:
                                    project_service.notify_project_overdue(project, days_overdue)
                                self.stdout.write(f'    üö® Projet en retard: "{project.name}" - {days_overdue} jours')
                                stats['notifications_sent'] += 1
                
                except Exception as e:
                    self.stdout.write(f'    ‚ùå Erreur projet {project.name}: {str(e)}')
                    stats['errors'] += 1
            
        except Exception as e:
            self.stdout.write(f'‚ùå Erreur rappels projets: {str(e)}')
            stats['errors'] += 1
        
        return stats

    def check_task_reminders(self, dry_run=False, force=False):
        """V√©rifier et envoyer les rappels de t√¢ches"""
        stats = {'tasks_checked': 0, 'notifications_sent': 0, 'errors': 0}
        
        try:
            # Pour l'instant, on simule les t√¢ches
            # Dans une vraie application, vous auriez un mod√®le Task
            self.stdout.write('  üìã Syst√®me de t√¢ches non impl√©ment√© dans ce test')
            stats['tasks_checked'] = 0
            
        except Exception as e:
            self.stdout.write(f'‚ùå Erreur rappels t√¢ches: {str(e)}')
            stats['errors'] += 1
        
        return stats

    def already_notified_today(self, project, notification_type, days=None):
        """V√©rifier si une notification a d√©j√† √©t√© envoy√©e aujourd'hui"""
        today = timezone.now().date()
        
        # Construire le filtre
        filters = {
            'notification_type': notification_type,
            'related_object_id': project.id,
            'related_object_type': 'project',
            'created_at__date': today
        }
        
        if days is not None:
            # Pour les rappels, on peut ajouter une logique plus fine
            pass
        
        return EmailNotification.objects.filter(**filters).exists()

    def display_stats(self, stats):
        """Afficher les statistiques finales"""
        self.stdout.write('\nüìä Statistiques de l\'ex√©cution:')
        self.stdout.write(f'  üìÅ Projets v√©rifi√©s: {stats.get("projects_checked", 0)}')
        self.stdout.write(f'  üìã T√¢ches v√©rifi√©es: {stats.get("tasks_checked", 0)}')
        self.stdout.write(f'  üìß Notifications envoy√©es: {stats.get("notifications_sent", 0)}')
        self.stdout.write(f'  ‚ùå Erreurs: {stats.get("errors", 0)}')
        
        if stats.get('notifications_sent', 0) > 0:
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Rappels envoy√©s avec succ√®s!')
            )
        else:
            self.stdout.write(
                self.style.WARNING('‚ÑπÔ∏è Aucun rappel √† envoyer aujourd\'hui')
            )










