from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from notifications.services import EmailNotificationService
from notifications.models import EmailTemplate
from django.utils import timezone

User = get_user_model()


class Command(BaseCommand):
    help = 'Tester le syst√®me de notification email'

    def add_arguments(self, parser):
        parser.add_argument(
            '--email',
            type=str,
            help='Email du destinataire pour le test',
            default='test@example.com'
        )
        parser.add_argument(
            '--type',
            type=str,
            choices=['system_alert', 'project_created', 'project_updated', 'deadline_reminder'],
            default='system_alert',
            help='Type de notification √† tester'
        )

    def handle(self, *args, **options):
        email = options['email']
        notification_type = options['type']
        
        self.stdout.write(
            self.style.SUCCESS(f'üß™ Test du syst√®me de notification email')
        )
        self.stdout.write(f'üìß Email destinataire: {email}')
        self.stdout.write(f'üìã Type de notification: {notification_type}')
        
        try:
            # Cr√©er ou r√©cup√©rer un utilisateur de test
            user, created = User.objects.get_or_create(
                email=email,
                defaults={
                    'username': email.split('@')[0],
                    'first_name': 'Test',
                    'last_name': 'User',
                    'is_active': True
                }
            )
            
            if created:
                self.stdout.write(
                    self.style.WARNING(f'üë§ Utilisateur de test cr√©√©: {user.email}')
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS(f'üë§ Utilisateur existant trouv√©: {user.email}')
                )
            
            # Cr√©er les templates de test s'ils n'existent pas
            self.create_test_templates()
            
            # Tester le service de notification
            service = EmailNotificationService()
            
            # Cr√©er une notification de test
            if notification_type == 'system_alert':
                notification = service.create_notification(
                    recipient=user,
                    subject="üß™ Test du syst√®me d'email - GHP Portail",
                    message=f"""
                    Ceci est un email de test pour v√©rifier le bon fonctionnement du syst√®me de notification.
                    
                    D√©tails du test:
                    - Date: {timezone.now().strftime('%d/%m/%Y %H:%M:%S')}
                    - Type: {notification_type}
                    - Utilisateur: {user.get_full_name() or user.username}
                    - Syst√®me: GHP Portail
                    
                    Si vous recevez cet email, cela signifie que la configuration email fonctionne correctement.
                    
                    Configuration utilis√©e:
                    - Serveur SMTP: 172.16.0.25:25
                    - TLS: D√©sactiv√©
                    - Exp√©diteur: GHPportail@groupehdyrapahrm.com
                    
                    Cordialement,
                    L'√©quipe GHP Portail
                    """,
                    notification_type=notification_type,
                    priority='low'
                )
                
            elif notification_type == 'project_created':
                notification = service.create_notification(
                    recipient=user,
                    subject="üéâ Nouveau projet cr√©√© - Test",
                    message=f"""
                    Un nouveau projet de test a √©t√© cr√©√©.
                    
                    Nom du projet: Projet Test GHP
                    Description: Projet de test pour v√©rifier les notifications
                    Cr√©√© par: {user.get_full_name() or user.username}
                    Date: {timezone.now().strftime('%d/%m/%Y %H:%M')}
                    
                    Ce projet est utilis√© uniquement pour tester le syst√®me de notification.
                    """,
                    notification_type=notification_type,
                    priority='medium',
                    related_object_id=999,
                    related_object_type='project'
                )
                
            elif notification_type == 'deadline_reminder':
                notification = service.create_notification(
                    recipient=user,
                    subject="‚è∞ Rappel d'√©ch√©ance - Test",
                    message=f"""
                    Attention! L'√©ch√©ance du projet de test approche.
                    
                    Projet: Projet Test GHP
                    √âch√©ance: {(timezone.now() + timezone.timedelta(days=1)).strftime('%d/%m/%Y')}
                    Jours restants: 1
                    
                    Ceci est un test du syst√®me de rappel d'√©ch√©ance.
                    """,
                    notification_type=notification_type,
                    priority='high',
                    related_object_id=999,
                    related_object_type='project'
                )
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Notification cr√©√©e avec l\'ID: {notification.id}')
            )
            
            # Afficher les statistiques
            stats = service.get_notification_stats()
            self.stdout.write('\nüìä Statistiques des notifications:')
            self.stdout.write(f'   Total: {stats["total"]}')
            self.stdout.write(f'   En attente: {stats["pending"]}')
            self.stdout.write(f'   Envoy√©es: {stats["sent"]}')
            self.stdout.write(f'   √âchou√©es: {stats["failed"]}')
            self.stdout.write(f'   Livr√©es: {stats["delivered"]}')
            
            self.stdout.write(
                self.style.SUCCESS('\nüéâ Test termin√© avec succ√®s!')
            )
            self.stdout.write(
                self.style.WARNING('üìß V√©rifiez votre bo√Æte email pour confirmer la r√©ception.')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur lors du test: {str(e)}')
            )
            raise

    def create_test_templates(self):
        """Cr√©er les templates de test s'ils n'existent pas"""
        templates_data = [
            {
                'name': 'Template Test - Alerte Syst√®me',
                'subject_template': 'üß™ {{ subject }}',
                'body_template': '''
                <h2>Test du Syst√®me Email</h2>
                <p>{{ message }}</p>
                <p><strong>Date:</strong> {{ created_at|date:"d/m/Y √† H:i" }}</p>
                <p><strong>Utilisateur:</strong> {{ recipient.get_full_name|default:recipient.username }}</p>
                ''',
                'notification_type': 'system_alert'
            },
            {
                'name': 'Template Test - Projet Cr√©√©',
                'subject_template': 'üéâ {{ subject }}',
                'body_template': '''
                <h2>Nouveau Projet Cr√©√©</h2>
                <p>{{ message }}</p>
                <p><strong>Date de cr√©ation:</strong> {{ created_at|date:"d/m/Y √† H:i" }}</p>
                ''',
                'notification_type': 'project_created'
            },
            {
                'name': 'Template Test - Rappel √âch√©ance',
                'subject_template': '‚è∞ {{ subject }}',
                'body_template': '''
                <h2>Rappel d\'√âch√©ance</h2>
                <p>{{ message }}</p>
                <p><strong>Priorit√©:</strong> √âlev√©e</p>
                ''',
                'notification_type': 'deadline_reminder'
            }
        ]
        
        for template_data in templates_data:
            template, created = EmailTemplate.objects.get_or_create(
                name=template_data['name'],
                defaults=template_data
            )
            if created:
                self.stdout.write(
                    self.style.SUCCESS(f'üìù Template cr√©√©: {template.name}')
                )
