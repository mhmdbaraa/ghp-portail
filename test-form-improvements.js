// Script de test pour v√©rifier les am√©liorations du formulaire
console.log('üîß Test des am√©liorations du formulaire...');

function testFormImprovements() {
  console.log('='.repeat(50));
  console.log('üîç TEST DES AM√âLIORATIONS DU FORMULAIRE');
  console.log('='.repeat(50));
  
  // 1. V√©rifier l'√©tat actuel
  console.log('üìç √âTAT ACTUEL:');
  console.log('- URL actuelle:', window.location.href);
  console.log('- Pathname:', window.location.pathname);
  
  // 2. V√©rifier les √©l√©ments du formulaire
  console.log('üìù √âL√âMENTS DU FORMULAIRE:');
  
  // V√©rifier le formulaire
  const form = document.querySelector('form');
  console.log('- Formulaire trouv√©:', form ? '‚úÖ Oui' : '‚ùå Non');
  
  if (form) {
    const inputs = form.querySelectorAll('input, select, textarea');
    console.log('- Champs de saisie:', inputs.length);
    
    const buttons = form.querySelectorAll('button');
    console.log('- Boutons:', buttons.length);
    
    buttons.forEach((button, index) => {
      const text = button.textContent?.trim() || 'Sans texte';
      const disabled = button.disabled;
      console.log(`  ${index + 1}. ${text} - ${disabled ? 'D√©sactiv√©' : 'Activ√©'}`);
    });
  }
  
  // 3. V√©rifier les √©l√©ments de feedback visuel
  console.log('üé® FEEDBACK VISUEL:');
  
  // V√©rifier la progress bar
  const progressBar = document.querySelector('.MuiLinearProgress-root');
  console.log('- Progress bar:', progressBar ? '‚úÖ Pr√©sente' : '‚ùå Absente');
  
  // V√©rifier les spinners
  const spinners = document.querySelectorAll('.MuiCircularProgress-root');
  console.log('- Spinners:', spinners.length);
  
  // V√©rifier les overlays
  const overlays = document.querySelectorAll('[style*="position: absolute"]');
  console.log('- Overlays:', overlays.length);
  
  // 4. V√©rifier la navigation
  console.log('üß≠ NAVIGATION:');
  
  // V√©rifier le sidebar
  const sidebar = document.querySelector('[data-testid="sidebar"], .sidebar, [class*="sidebar"]');
  console.log('- Sidebar trouv√©:', sidebar ? '‚úÖ Oui' : '‚ùå Non');
  
  if (sidebar) {
    const sidebarItems = sidebar.querySelectorAll('a, button, [role="button"]');
    console.log('- √âl√©ments de navigation:', sidebarItems.length);
  }
  
  // V√©rifier la navigation contextuelle
  const isInUserModule = window.location.pathname.startsWith('/users/');
  console.log('- Module utilisateur:', isInUserModule ? '‚úÖ Oui' : '‚ùå Non');
  
  // 5. Test de simulation de clic
  console.log('üß™ TEST DE SIMULATION DE CLIC:');
  
  if (form) {
    const submitButton = form.querySelector('button[type="submit"]');
    if (submitButton) {
      console.log('- Bouton de soumission trouv√©:', '‚úÖ Oui');
      console.log('- Bouton d√©sactiv√©:', submitButton.disabled ? '‚úÖ Oui' : '‚ùå Non');
      
      // Simuler un clic
      console.log('- Simulation de clic...');
      submitButton.click();
      
      // V√©rifier l'√©tat apr√®s le clic
      setTimeout(() => {
        console.log('- Bouton d√©sactiv√© apr√®s clic:', submitButton.disabled ? '‚úÖ Oui' : '‚ùå Non');
        
        const progressAfterClick = document.querySelector('.MuiLinearProgress-root');
        console.log('- Progress bar apr√®s clic:', progressAfterClick ? '‚úÖ Pr√©sente' : '‚ùå Absente');
        
        const spinnerAfterClick = document.querySelector('.MuiCircularProgress-root');
        console.log('- Spinner apr√®s clic:', spinnerAfterClick ? '‚úÖ Pr√©sent' : '‚ùå Absent');
      }, 100);
    } else {
      console.log('- Bouton de soumission:', '‚ùå Non trouv√©');
    }
  }
  
  // 6. V√©rifier les erreurs de console
  console.log('‚ö†Ô∏è V√âRIFICATION DES ERREURS:');
  
  // V√©rifier les erreurs de React Router
  const routerErrors = [];
  const originalError = console.error;
  console.error = function(...args) {
    const errorMessage = args.join(' ');
    if (errorMessage.includes('useLocation() may be used only in the context of a <Router> component')) {
      routerErrors.push(errorMessage);
    }
    originalError.apply(console, args);
  };
  
  // Attendre un peu pour capturer les erreurs
  setTimeout(() => {
    if (routerErrors.length > 0) {
      console.log('‚ùå Erreurs de Router d√©tect√©es:');
      routerErrors.forEach(error => console.log(`  - ${error}`));
    } else {
      console.log('‚úÖ Aucune erreur de Router d√©tect√©e');
    }
  }, 1000);
  
  // 7. R√©sum√© et recommandations
  console.log('='.repeat(50));
  console.log('üìä R√âSUM√â ET RECOMMANDATIONS');
  console.log('='.repeat(50));
  
  const issues = [];
  const recommendations = [];
  
  if (!form) {
    issues.push('Formulaire non trouv√©');
    recommendations.push('V√©rifiez que le composant UserForm est correctement rendu');
  }
  
  if (routerErrors.length > 0) {
    issues.push('Erreurs de Router d√©tect√©es');
    recommendations.push('V√©rifiez que NavigationProvider est √† l\'int√©rieur du Router');
  }
  
  if (issues.length === 0) {
    console.log('‚úÖ Am√©liorations du formulaire fonctionnelles');
  } else {
    console.log('‚ùå Probl√®mes d√©tect√©s:');
    issues.forEach(issue => console.log(`- ${issue}`));
  }
  
  if (recommendations.length > 0) {
    console.log('üí° Recommandations:');
    recommendations.forEach(rec => console.log(`- ${rec}`));
  }
  
  console.log('üìñ Pour plus d\'aide, consultez USER_FORM_FIXES.md');
  console.log('üîß Pour un debug complet, allez sur http://localhost:3000/debug/auth');
  console.log('üß™ Pour un test simple, allez sur http://localhost:3000/test/auth');
}

// Ex√©cuter le test
testFormImprovements();
