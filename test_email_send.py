#!/usr/bin/env python
"""
Test d'envoi d'email avec gestion d'erreurs
"""
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'projecttracker.settings')
django.setup()

from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone
import socket


def test_smtp_connection():
    """Tester la connexion SMTP"""
    print("üîå Test de connexion SMTP")
    print("=" * 40)
    
    try:
        import smtplib
        
        # Test de connexion au serveur SMTP
        print(f"üì° Connexion au serveur {settings.EMAIL_HOST}:{settings.EMAIL_PORT}")
        
        server = smtplib.SMTP(settings.EMAIL_HOST, settings.EMAIL_PORT)
        server.quit()
        
        print("‚úÖ Connexion SMTP r√©ussie!")
        return True
        
    except socket.timeout:
        print("‚ùå Timeout de connexion - Le serveur ne r√©pond pas")
        return False
    except socket.gaierror:
        print("‚ùå Erreur DNS - Impossible de r√©soudre l'adresse")
        return False
    except ConnectionRefusedError:
        print("‚ùå Connexion refus√©e - Le serveur refuse la connexion")
        return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {str(e)}")
        return False


def test_email_send():
    """Tester l'envoi d'email"""
    print("\nüìß Test d'envoi d'email")
    print("=" * 40)
    
    # Demander l'email de test
    test_email = input("üìß Entrez votre email pour le test (ou appuyez sur Entr√©e pour annuler): ").strip()
    if not test_email:
        print("‚ùå Test annul√©")
        return False
    
    try:
        subject = "üß™ Test Email GHP Portail"
        message = f"""
        Ceci est un email de test du syst√®me GHP Portail.
        
        Configuration utilis√©e:
        - Serveur SMTP: {settings.EMAIL_HOST}:{settings.EMAIL_PORT}
        - TLS: {'Activ√©' if settings.EMAIL_USE_TLS else 'D√©sactiv√©'}
        - Exp√©diteur: {settings.DEFAULT_FROM_EMAIL}
        - Date: {timezone.now().strftime('%d/%m/%Y %H:%M:%S')}
        
        Si vous recevez cet email, la configuration fonctionne correctement!
        
        Cordialement,
        L'√©quipe GHP Portail
        """
        
        print(f"üì§ Envoi vers: {test_email}")
        print("‚è≥ Envoi en cours...")
        
        result = send_mail(
            subject=subject,
            message=message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[test_email],
            fail_silently=False
        )
        
        if result:
            print("‚úÖ Email envoy√© avec succ√®s!")
            print(f"üìß V√©rifiez votre bo√Æte email: {test_email}")
            return True
        else:
            print("‚ùå √âchec de l'envoi de l'email")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi: {str(e)}")
        print("\nüîß Solutions possibles:")
        print("   1. V√©rifiez que le serveur 172.16.0.25 est accessible")
        print("   2. V√©rifiez que le port 25 est ouvert")
        print("   3. V√©rifiez la configuration r√©seau")
        print("   4. Contactez l'administrateur syst√®me")
        return False


def test_notification_send():
    """Tester l'envoi via le syst√®me de notification"""
    print("\nüîî Test d'envoi via syst√®me de notification")
    print("=" * 50)
    
    try:
        from notifications.services import EmailNotificationService
        from django.contrib.auth import get_user_model
        
        User = get_user_model()
        
        # Demander l'email
        test_email = input("üìß Entrez votre email pour le test: ").strip()
        if not test_email:
            print("‚ùå Test annul√©")
            return False
        
        # Cr√©er ou r√©cup√©rer l'utilisateur
        user, created = User.objects.get_or_create(
            email=test_email,
            defaults={
                'username': test_email.split('@')[0],
                'first_name': 'Test',
                'last_name': 'User',
                'is_active': True
            }
        )
        
        print(f"üë§ Utilisateur: {user.email}")
        
        # Cr√©er une notification
        service = EmailNotificationService()
        notification = service.create_notification(
            recipient=user,
            subject="üß™ Test Notification GHP Portail",
            message=f"""
            Ceci est un test du syst√®me de notification GHP Portail.
            
            D√©tails du test:
            - Date: {timezone.now().strftime('%d/%m/%Y %H:%M:%S')}
            - Type: Test syst√®me
            - Utilisateur: {user.get_full_name() or user.username}
            
            Configuration:
            - Serveur SMTP: {settings.EMAIL_HOST}:{settings.EMAIL_PORT}
            - TLS: {'Activ√©' if settings.EMAIL_USE_TLS else 'D√©sactiv√©'}
            - Exp√©diteur: {settings.DEFAULT_FROM_EMAIL}
            
            Si vous recevez cet email, le syst√®me de notification fonctionne correctement!
            
            Cordialement,
            L'√©quipe GHP Portail
            """,
            notification_type='system_alert',
            priority='low',
            send_immediately=True  # Envoyer imm√©diatement
        )
        
        print(f"‚úÖ Notification cr√©√©e: ID {notification.id}")
        print("üì§ Tentative d'envoi...")
        
        # Attendre un peu pour voir le r√©sultat
        import time
        time.sleep(2)
        
        # V√©rifier le statut
        notification.refresh_from_db()
        print(f"üìä Statut final: {notification.status}")
        
        if notification.status == 'sent':
            print("‚úÖ Email envoy√© avec succ√®s!")
            return True
        elif notification.status == 'failed':
            print(f"‚ùå √âchec de l'envoi: {notification.error_message}")
            return False
        else:
            print(f"‚è≥ Statut: {notification.status}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("üöÄ Test complet du syst√®me d'email GHP Portail")
    print()
    
    # Test 1: Connexion SMTP
    smtp_ok = test_smtp_connection()
    
    if smtp_ok:
        # Test 2: Envoi d'email simple
        email_ok = test_email_send()
        
        if email_ok:
            # Test 3: Syst√®me de notification
            test_notification_send()
    
    print("\nüéâ Tests termin√©s!")
    if smtp_ok:
        print("üí° Le serveur SMTP est accessible")
    else:
        print("‚ö†Ô∏è  Probl√®me de connectivit√© SMTP")
